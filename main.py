import os
import logging
import json
import random
import asyncio
from datetime import datetime

import openai
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from dotenv import load_dotenv
from pyexpat.errors import messages
from wheel.macosx_libfile import build_version_command_fields

# –ö–æ—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
CREATOR_GITHUB = "alqmnzBOTS"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö (JSON-—Ñ–∞–π–ª)
FAVORITES_FILE = "favorites.json"

def load_favorites():
    try:
        with open(FAVORITES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_favorites(favorites):
    with open(FAVORITES_FILE, "w", encoding="utf-8") as f:
        json.dump(favorites, f, ensure_ascii=False, indent=2)

def add_to_favorites(user_id, gift):
    favorites = load_favorites()
    user_id = str(user_id)

    if user_id not in favorites:
        favorites[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    if gift not in favorites[user_id]:
        favorites[user_id].append(gift)
        save_favorites(favorites)
        return True
    return False

def remove_from_favorites(user_id, gift_index):
    favorites = load_favorites()
    user_id = str(user_id)

    if user_id in favorites and 0 <= gift_index < len(favorites[user_id]):
        removed = favorites[user_id].pop(gift_index)
        save_favorites(favorites)
        return removed
    return None

def get_user_favorites(user_id):
    favorites = load_favorites()
    user_id = str(user_id)
    return favorites.get(user_id, [])

# Finite State Machine –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
class GiftGeneration(StatesGroup):
    GENDER = State()
    AGE = State()
    BUDGET = State()
    INTERESTS = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_gift_ideas(gender: str, age: int, budget: int, interests: str) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI"""
    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {gender}, {age} –ª–µ—Ç, "
        f"—Å –±—é–¥–∂–µ—Ç–æ–º {budget} —Ä—É–±–ª–µ–π. –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}. "
        "–ü–æ–¥–∞—Ä–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç—É. "
        "–§–æ—Ä–º–∞—Ç: 1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö) - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
    )

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–¥–∞—Ä–∫–æ–≤"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )

        ideas = response.choices[0].message.content.strip().split("\n")
        return [idea for idea in ideas if idea.strip()]
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return []

async def generate_random_gift() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞"""
    categories = ["—Ç–µ—Ö–Ω–∏–∫–∞", "–∫–Ω–∏–≥–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "—Å–ø–æ—Ä—Ç", "–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–∏–≥—Ä—ã", "–∫—É—Ö–Ω—è"]
    interests = random.sample(categories, 2)

    gender = random.choice(["–º—É–∂—á–∏–Ω—ã", "–∂–µ–Ω—â–∏–Ω—ã"])
    age = random.randint(18, 65)
    budget = random.randint(500, 10000)

    ideas = await generate_gift_ideas(gender, age, budget, ", ".join(interests))
    return random.choice(ideas) if ideas else "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = (
        f"üéÅ –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è!\n\n"
        "‚ú® –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏:\n"
        "- –ü–æ–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        "- –í–æ–∑—Ä–∞—Å—Ç\n"
        "- –ë—é–¥–∂–µ—Ç\n"
        "- –ò–Ω—Ç–µ—Ä–µ—Å—ã\n\n"
        f"‚ö†Ô∏è –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: github.com/{CREATOR_GITHUB}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/gift - –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        "/random - —Å–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è –ø–æ–¥–∞—Ä–∫–∞\n"
        "/favorites - –º–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–¥–µ–∏"
    )
    await message.answer(welcome_text)

@dp.message(F.text == "/gift")
async def cmd_gift(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞"""
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ú—É–∂—á–∏–Ω–µ"))
    builder.add(types.KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–µ"))
    builder.add(types.KeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ"))
    builder.adjust(2)

    await message.answer(
        "üë§ –î–ª—è –∫–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫?",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(GiftGeneration.GENDER)

@dp.message(GiftGeneration.GENDER)
async def process_gender(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    gender_map = {
        "–º—É–∂—á–∏–Ω–µ": "–º—É–∂—á–∏–Ω—É",
        "–∂–µ–Ω—â–∏–Ω–µ": "–∂–µ–Ω—â–∏–Ω—É",
        "–Ω–µ –≤–∞–∂–Ω–æ": "—á–µ–ª–æ–≤–µ–∫–∞"
    }

    gender = next((k for k in gender_map if message.text.lower().startswith(k[:3])), None)

    if not gender:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return

    await  state.update_data(gender=gender_map[gender])
    await message.answer(
        "üî¢ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—é?",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(GiftGeneration.AGE)

@dp.message(GiftGeneration.AGE)
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    try:
        age = int(message.text)
        if age < 1 or age > 120:
            raise ValueError
        await state .update_data(age=age)
        await message.answer("üí∞ –ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ (–≤ —Ä—É–±–ª—è—Ö)?")
        await state.set_state(GiftGeneration.BUDGET)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120):")

@dp.message(GiftGeneration.BUDGET)
async def process_budget(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞"""
    try:
        budget = int(message.text)
        if budget < 10:
            raise ValueError
        await state.update_data(budget=budget)
        await message.answer("üéØ –ö–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∑—ã–∫–∞, —Å–ø–æ—Ä—Ç, –∫–Ω–∏–≥–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)")
        await state.set_state(GiftGeneration.INTERESTS)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10):")

@dp.message(GiftGeneration.INTERESTS)
async def process_interests(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–∞"""
    interests = message.text
    data = await state.get_data()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
    ideas = await generate_gift_ideas(
        data['gender'],
        data['age'],
        data['budget'],
        interests
    )

    await bot.delete_message(message.chat.id, loading_msg.message_id)

    if not ideas:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    response = "üéÅ –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n\n" + "\n\n".join(ideas[:5])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    for idx, idea in enumerate(ideas[:3]):
        builder.add(InlineKeyboardButton(
            text=f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é {idx+1}",
            callback_data=f"save_{idx}"
        ))
    builder.adjust(1)

    await state.update_data(ideas=ideas)
    await message.answer(response, reply_markup=builder.as_markup())
    await state.set_state(None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message(F.text == "/random")
async def cmd_random(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"""
    loading_msg = await message.answer("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é...")
    idea = await generate_random_gift()
    await bot.delete_message(message.chat.id, loading_msg.message_id)

    if idea:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∏–¥–µ—é",
            callback_data="save_random"
        ))
        await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è –ø–æ–¥–∞—Ä–∫–∞:\n\n{idea}", reply_markup=builder.as_markup())
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

@dp.callback_query(F.data.startswith("save_"))
async def save_gift_idea(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    action = callback.data.split("_")[1]
    data = await state.get_data()

    if action == "random":
        gift_text = callback.message.text.split("\n\n")[-1]
    else:
        idx = int(action)
        ideas = data.get("ideas", [])
        if idx < len(ideas):
            gift_text = ideas[idx]
        else:
            await callback.answer("–ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

    user_id = callback.from_user.id
    if add_to_favorites(user_id, gift_text):
        await callback.answer("‚úÖ –ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await callback.answer("‚ö†Ô∏è –≠—Ç–∞ –∏–¥–µ—è —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

@dp.message(F.text == "/favorites")
async def cmd_favorites(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–¥–µ–∏"""
    favorites = get_user_favorites(message.from_user.id)
    if not favorites:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–¥–µ–π")
        return

    response = "‚≠ê –¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:\n\n"
    for idx, gift in enumerate(favorites, 1):
        response += f"{idx}. {gift}\n\n"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é",
        callback_data="delete_favorite"
    ))

    await message.answer(response, reply_markup=builder.as_markup())

@dp.callback_query(F.data == "delete favorite")
async def delete_favorite_start(callback: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    favorites = get_user_favorites(callback.from_user.id)
    if not favorites:
        await callback.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for idx in range(len(favorites)):
        builder.add(InlineKeyboardButton(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {idx + 1}",
            callback_data=f"remove_{idx}"
        ))
    builder.adjust(3)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_"))
async def remove_favorite(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∏–¥–µ—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    idx = int(callback.data.split("_")[1])
    removed = remove_from_favorites(callback.from_user.id, idx)

    if removed:
        await callback.message.edit_text("‚úÖ –ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–¥–µ—é", show_alert=True)

# –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
dp.message(F.text.contains("–∫—É–ø–∏—Ç—å"))
async def handle_buy_request(message: types.Message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏"""
    await message.answer(
        "üõí –•–æ—á–µ—à—å –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫? –í–æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:\n\n"
        "‚Ä¢ Ozon: https://ozon.ru\n"
        "‚Ä¢ Wildberries: https://wildberries.ru\n"
        "‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç: https://market.yandex.ru\n\n"
        "–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üòä"
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    logger.info("Starting Gift Generator Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



